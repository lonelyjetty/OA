package com.bizdata.zz.staff.controller;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bizdata.commons.utils.DateEditor;
import com.bizdata.zz.project.model.domain.ProductModel;
import com.bizdata.zz.project.model.service.ProductModelService;
import com.bizdata.zz.staff.domain.StaffMain;
import com.bizdata.zz.staff.service.StaffMainService;
import com.google.gson.Gson;

import me.sdevil507.resp.ResultUtil;
import me.sdevil507.resp.ResultVO;

@Controller
@RequestMapping("/admin/staffs")
public class staffController {
	@InitBinder
	protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
		// 对于需要转换为Date类型的属性，使用DateEditor进行处理
		binder.registerCustomEditor(Date.class, new DateEditor());
	}
	@Autowired
	private StaffMainService staffMainService;
	
	
	@RequiresPermissions("staffs:view")
	@RequestMapping(method = RequestMethod.GET)
	public ModelAndView view() {
		return new ModelAndView("zz/staff/list");
	}
	
	
	//跳转员工测评
	@RequiresPermissions("staffs:view")
	@RequestMapping(value="/staffs_test",method = RequestMethod.GET)
	public ModelAndView staffsTest() {
		return new ModelAndView("zz/staff/test/list");
	}
	
	//跳转员工测评详情页
	@RequestMapping(value="/staffs_test_detail",method = RequestMethod.GET)
	public ModelAndView staffsTestDetail() {
		return new ModelAndView("zz/staff/test/detail");
	}
	
	
	@RequiresPermissions("staff:view")
	@RequestMapping(value="list",method=RequestMethod.GET)
	@ResponseBody
	public String staffslist() {
		Map<String, Object> mp = new HashMap<>();
		List<StaffMain> list = staffMainService.findAll();
		mp.put("rows", list);
		return new Gson().toJson(mp);
	}
	
	
	@RequiresPermissions("staff:view")
	@RequestMapping(value="/turn",method=RequestMethod.GET)
	@ResponseBody
	public ModelAndView show(String id) {
		StaffMain sm = staffMainService.findOne(id);
		return new ModelAndView("zz/staff/view","sm",sm);
	}
	
	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public ResultVO del(String id) {
		ResultVO resultVO;
		if(staffMainService.delete(id)) {
			resultVO=ResultUtil.create(0, "删除成功");
		}else {
			resultVO=ResultUtil.create(-1, "删除失败");
		}
		return resultVO;
	}
	
	@RequiresPermissions("staffs:view")
	@RequestMapping(value="/adds",method = RequestMethod.GET)
	public ModelAndView add() {
		return new ModelAndView("zz/staff/add_staff");
	}
	@RequestMapping(value="/addshaff",method=RequestMethod.POST)
	@ResponseBody
	public ResultVO addshaff(StaffMain staffMian) {
		ResultVO resultVO;
		staffMian.setAddtime(new Timestamp(System.currentTimeMillis()));
		staffMian.setEdittime(new Timestamp(System.currentTimeMillis()));
		if(staffMainService.save(staffMian)) {
			resultVO=ResultUtil.create(0, "添加成功");
		}else {
			resultVO=ResultUtil.create(-1, "添加失败");
		}
		return resultVO;
	}
	
	
	@RequiresPermissions("staff:view")
	@RequestMapping(value="/edit",method=RequestMethod.GET)
	@ResponseBody
	public ModelAndView edit(String id) {
		StaffMain sm = staffMainService.findOne(id);
		return new ModelAndView("zz/staff/edit_staff","sm",sm);
	}
	
	
	@RequestMapping(value="/updateStaff",method=RequestMethod.POST)
	@ResponseBody
	public ResultVO update(StaffMain staffMian) {
		ResultVO resultVO;
		staffMian.setEdittime(new Timestamp(System.currentTimeMillis()));
		if(staffMainService.save(staffMian)) {
			resultVO=ResultUtil.create(0, "添加成功");
		}else {
			resultVO=ResultUtil.create(-1, "添加失败");
		}
		return resultVO;
	}
	
	
	
	
	
	
	
	
}
