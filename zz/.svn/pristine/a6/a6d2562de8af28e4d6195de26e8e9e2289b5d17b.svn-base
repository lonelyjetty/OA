package com.bizdata.zz.project.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bizdata.admin.domain.Organization;
import com.bizdata.commons.constant.BizdataResponseStatus;
import com.bizdata.commons.utils.DateEditor;
import com.bizdata.zz.project.domain.Product;
import com.bizdata.zz.project.domain.ProductStoriesAndDuties;
import com.bizdata.zz.project.repository.ProductStoriesAndDutiesRepository;
import com.bizdata.zz.project.service.ProductService;
import com.bizdata.zz.project.service.ProductStoriesAndDutiesService;
import com.google.gson.Gson;

import me.sdevil507.resp.ResultUtil;
import me.sdevil507.resp.ResultVO;

@Controller
@RequestMapping("/admin/productStoriesAndDuties")
public class ProductStoriesAndDutiesController {

	@InitBinder
	protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
		// 对于需要转换为Date类型的属性，使用DateEditor进行处理
		binder.registerCustomEditor(Date.class, new DateEditor());
	}

	@Autowired
	private ProductStoriesAndDutiesService productStoriesAndDutiesService;
	
	@Autowired
	private ProductService productService;

	@Autowired
	private ProductStoriesAndDutiesRepository productStoriesAndDutiesRepository;

	 @RequiresPermissions("sys:organization:view")
	    @RequestMapping(method = RequestMethod.GET)
	    public ModelAndView index() {
	        return new ModelAndView("zz/project/productDetails");
	    }
	 
	    /**
	     * 返回部门list json数据
	     *
	     * @return json类型部门数据
	     */
	    @RequiresPermissions("sys:organization:view")
	    @RequestMapping(value = "/productStoriesAndDutiesList", method = RequestMethod.GET)
	    @ResponseBody
	    public String productStoriesAndDutiesList(String id) {
	    	//根据  项目id  parent为0  进行查找   判断是否需要初始化数据
	    	Map<String, Object> organizationMap = new HashMap<>();
	    	boolean flag = productStoriesAndDutiesService.canInit(id);
	    	Product findOne = productService.findOne(id);
	    	if(flag) {
	    		//初始化项目  根据项目id初始化
	    		ProductStoriesAndDuties productStoriesAndDuties = new ProductStoriesAndDuties();
	    		productStoriesAndDuties.setCreator("admin");
	    		productStoriesAndDuties.setParent("0");
	    		productStoriesAndDuties.setLevel(0);
	    		productStoriesAndDuties.setEndTime(new Date());
	    		productStoriesAndDuties.setExpanded(true);
	    		productStoriesAndDuties.setIsleaf(false);
	    		productStoriesAndDuties.setLoaded(true);
	    		productStoriesAndDuties.setName(findOne.getProductName());
	    		productStoriesAndDuties.setProId(findOne.getId());
	    		productStoriesAndDuties.setStartTime(new Date());
	    		productStoriesAndDuties.setRun(findOne.getIteration());
	    		try {
	    			productStoriesAndDutiesService.save(productStoriesAndDuties);
				} catch (Exception e) {
					e.printStackTrace();
				}	
	    	}else {
	    		ProductStoriesAndDuties p=productStoriesAndDutiesRepository.canInit(id);
	    		p.setCreator("admin");
	    		p.setParent("0");
	    		p.setLevel(0);
	    		p.setEndTime(new Date());
	    		p.setExpanded(true);
	    		p.setIsleaf(false);
	    		p.setLoaded(true);
	    		p.setName(findOne.getProductName());
	    		p.setProId(findOne.getId());
	    		p.setStartTime(new Date());
	    		p.setRun(findOne.getIteration());
	    		productStoriesAndDutiesService.save(p);
	    		try {
	    			productStoriesAndDutiesService.save(p);
				} catch (Exception e) {
					e.printStackTrace();
				}
	    	}
	    	organizationMap.put("rows", productStoriesAndDutiesService.findAllByProId(id));
	    	
	        return new Gson().toJson(organizationMap);
	    }

	    /**
	     * 添加部门
	     *
	     * @return json
	     */
	    @RequiresPermissions("sys:organization:create")
	    @ResponseBody
	    @RequestMapping(value = "/addproductStoriesAndDuties", method = RequestMethod.POST)
	    public String addOrganization(ProductStoriesAndDuties productStoriesAndDuties) {
	        String json;
	        try {
	        	//获取开始时间
	        	Date t1 = productStoriesAndDuties.getStartTime();
	        	//获取结束时间
	        	Date t2 = productStoriesAndDuties.getEndTime();
	        	//计算时间差
	        	int days = (int)((t2.getTime() - t1.getTime())/86400000)+1;
	        	//找到父节点的冲刺阶段
	        	String pid = productStoriesAndDuties.getParent();
	        	ProductStoriesAndDuties t = productStoriesAndDutiesService.findOne(pid);
	        	String gzr = t.getRun();//获取迭代周期
	        	String zhouqi="";//迭代周期长度5 10 15 20
	        	/**
	        	 * 判断父节点parent是否为0
	        	 * 
	        	 */
	        	if(t.getParent().equals("0")) {
	        		zhouqi = gzr.substring(0,gzr.indexOf("工"));
	        		int i = Integer.parseInt(zhouqi);
	        		String tid = t.getId();
	        		List<ProductStoriesAndDuties> list = productStoriesAndDutiesService.findAllByParentId(tid);
	        		int run;
	        		int p4=0;
	        		if(list.size()==0) {
	        			run=0;
	        			productStoriesAndDuties.setRun(run+"");
	        		}else {
	        			run=Integer.parseInt(list.get((list.size()-1)).getRun());
	        			for (ProductStoriesAndDuties p : list) {
	        				if(p.getRun().equals(run+"")) {
	        				//获取开始时间
	        	        	Date p1 = p.getStartTime();
	        	        	//获取结束时间
	        	        	Date p2 = p.getEndTime();
	        	        	//计算时间差
	        	        	int p3 = (int)((p2.getTime() - p1.getTime())/86400000)+1;
	        	        	p4+=p3;}
	        	        	
						}
	        			p4+=days;
	        			if(p4<=i) {
	        				productStoriesAndDuties.setRun(run+"");
	        			}else {
	        				run+=1;
	        				productStoriesAndDuties.setRun(run+"");
	        			}
	        		}
	        		
	        	}
	        	else {  
	        		zhouqi = gzr;
	        		productStoriesAndDuties.setRun(zhouqi);
	        	}
	        	productStoriesAndDutiesService.insertProductStoriesAndDuties(productStoriesAndDuties);
	            json = BizdataResponseStatus.COMMON_SUCCESS.getResult("新增部门成功");
	        } catch (Exception e) {
	            e.printStackTrace();
	            json = BizdataResponseStatus.COMMON_ERROR.getResult("新增部门失败");
	        }
	        return json;
	    }

	    /**
	     * 部门更新操作
	     *
	     * @param sysOrganization
	     * @return json
	     */
	    @RequiresPermissions("sys:organization:update")
	    @ResponseBody
	    @RequestMapping(value = "/update", method = RequestMethod.POST)	   
	    public String update(ProductStoriesAndDuties productStoriesAndDuties) {
	    	System.out.println("122333444455555===============");
	        String json;
	        try {
	        	ProductStoriesAndDuties s = productStoriesAndDutiesService.findOne(productStoriesAndDuties.getId());
	        	s.setName(productStoriesAndDuties.getName());
	        	s.setCreator(productStoriesAndDuties.getCreator());
	        	s.setStartTime(productStoriesAndDuties.getStartTime());
	        	s.setEndTime(productStoriesAndDuties.getEndTime());
	        	productStoriesAndDutiesService.updateProductStoriesAndDuties(s);
	            json = BizdataResponseStatus.COMMON_SUCCESS.getResult("更新部门成功");
	        } catch (Exception e) {
	            e.printStackTrace();
	            json = BizdataResponseStatus.COMMON_ERROR.getResult("更新部门失败");
	        }
	        return json;
	    }

	    /**
	     * 根据id删除部门
	     *
	     * @param id 部门id
	     * @return json类型操作反馈
	     */
	    @RequiresPermissions("sys:organization:delete")
	    @ResponseBody
	    @RequestMapping(value = "/delete", method = RequestMethod.POST)
	    public String delete(String id) {
	        String json;
	        try {
	            if (productStoriesAndDutiesService.canDeleteProductStoriesAndDuties(id)) {
	                // 可以删除
	            	productStoriesAndDutiesService.deleteProductStoriesAndDuties(id);
	                json = BizdataResponseStatus.COMMON_SUCCESS.getResult("删除部门成功");
	            } else {
	                // 部门下存在人员
	                json = BizdataResponseStatus.COMMON_ERROR.getResult("部门或子部门下存在人员，不允许删除！");
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	            json = BizdataResponseStatus.COMMON_ERROR.getResult("删除部门失败");
	        }
	        return json;
	    }

	    /**
	     * 获取相同父项的组织机构 并包装到TreeModel中给页面提供树形展示
	     *
	     * @param id 组织机构id
	     * @return json类型树形数据
	     */
	    @RequiresPermissions("sys:organization:view")
	    @RequestMapping(value = "/brotherOrganization/{id}", method = RequestMethod.GET)
	    @ResponseBody
	    public String brotherOrganization(@PathVariable("id") String id) {
	        String json = "";
	        try {
	            List<ProductStoriesAndDuties> orgList = productStoriesAndDutiesService.findAllByParentId(id);
	            List<Map<String, Object>> list = new ArrayList<>();
	            if (orgList != null) {
	                for (ProductStoriesAndDuties org : orgList) {
	                    Map<String, Object> map = new HashMap<>();
	                    int count = productStoriesAndDutiesService.countByParentId(org.getId());
	                    if (count > 0) {
	                        map.put("type", "folder");
	                    } else {
	                        map.put("type", "item");
	                    }
	                    map.put("id", org.getId() + "");
	                    map.put("text", org.getName());
	                    list.add(map);
	                }
	            }
	            json = new Gson().toJson(list);
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return json;
	    }
}
